{layout none}
{contentType application/xml}
<?xml version="1.0" encoding="utf-8"?>

<dat:dataPack 
    id="{!= time()}" 
    ico="{$ico}" 
    application="PohodaConnector API" 
    version="2.0" 
    note="{ifset $message}{$message} | {/ifset}Count: {!= count($stocks)}{if $lastEditTime} | Last edit time: {$lastEditTime|date:'H:i:s d.m.Y'}{/if}" 
    xmlns:dat="http://www.stormware.cz/schema/version_2/data.xsd" 
    xmlns:stk="http://www.stormware.cz/schema/version_2/stock.xsd" 
    xmlns:typ="http://www.stormware.cz/schema/version_2/type.xsd"
    xmlns:ftr="http://www.stormware.cz/schema/version_2/filter.xsd"
    >

	{foreach $stocksToInsert as $stock}
		{? $insertedStockIds[$stock->id] = $stock->id}
		{include insert, stock => $stock}
    {/foreach}

    {foreach $stocks as $stock}
		{var pohodaItems => $pohodaRepo->findByCodeAliasById($stock->pohodaCode)}

		{if !count($pohodaItems) && !array_key_exists($stock->id, $insertedStockIds)}
			{? $insertedStockIds[$stock->id] = $stock->id}
			{include insert, stock => $stock}
		{/if}

		{if count($pohodaItems)}
			{include update, stock => $stock, pohodaItems => $pohodaItems}
		{/if}

    {/foreach}	
</dat:dataPack>

{define insert}
<!-- INSERT -->
<dat:dataPackItem id="00{$stock->id}"
				  version="2.0">
	<stk:stock version="2.0">
		<stk:stockHeader>
			<!--  ZÃ¡soba  -->
			<stk:stockType>card</stk:stockType>
			<stk:code>{$stock->pohodaCode}</stk:code>
			<stk:isSales>true</stk:isSales>
			<stk:isInternet>true</stk:isInternet>
			<stk:purchasingRateVAT>{include vat, item => $stock}</stk:purchasingRateVAT>
			<stk:sellingRateVAT>{include vat, item => $stock}</stk:sellingRateVAT>
			<stk:name><![CDATA[{$stock->product->name|truncate:90:''}]]></stk:name>
			<stk:storage>
				<typ:ids>{$defaultStorage}</typ:ids>
			</stk:storage>
			<!--  Ceny  -->
			<stk:typePrice>
				<typ:ids>{$typePrice}</typ:ids>
			</stk:typePrice>
			<stk:sellingPrice>{$stock->price}</stk:sellingPrice>
			<stk:purchasingPrice n:if="$stock->purchasePrice">{$stock->purchasePrice}</stk:purchasingPrice>
		</stk:stockHeader>
	</stk:stock>
</dat:dataPackItem>
{/define}

{define update}
<!-- UPDATE -->
<dat:dataPackItem n:foreach="$pohodaItems as $key => $pohodaItem"
				  id="{$key}00{$stock->id}"
				  version="2.0">
	<stk:stock version="2.0">
		<stk:actionType>
			<stk:update>
				<ftr:filter>
					<ftr:code>{$stock->pohodaCode}</ftr:code>
					<ftr:store>
						<typ:ids>{$pohodaItem->storage}</typ:ids>
					</ftr:store>
				</ftr:filter>
			</stk:update>
		</stk:actionType>
		<stk:stockHeader>
			<stk:sellingPrice>{$stock->price}</stk:sellingPrice>
			<stk:purchasingPrice n:if="$stock->purchasePrice">{$stock->purchasePrice}</stk:purchasingPrice>
			<stk:name><![CDATA[{$stock->product->name}]]></stk:name>
		</stk:stockHeader>
	</stk:stock>
</dat:dataPackItem>
{/define}

{define vat}{var vat => (int) $item->vat->value}{if $vat === $vatRates->high}high{elseif $vat === $vatRates->low}low{else}none{/if}{/define}
